# home work 1 for data analysis course
# System Admin:
def ccomplexity_rater(other_function):
    '''
    This function calculates the radian cyclomatic complexity of other functions.
    Radian complexity is used as a proxy for cognitive complexity, ie how hard is a code block to understand.
    Inputs: Other Python functions.
    Outputs: A positive integer value that is located in the interval 1-41. The scalar is used in conjunction
    with a printed legend.

    The program first uses introspection to convert other_function to a string representation of the
    source code that the function was originally expressed in.
    Subsequently another module radon that calculates cognitive complexity is called.
    Dependencies: If the radon module is not installed consider executing ```pip install radon```
    From:   http://radon.readthedocs.io/en/latest/api.html
    https://www.guru99.com/cyclomatic-complexity.html

    '''
    import pandas as pd
    import inspect, radon, pprint
    from radon.complexity import cc_rank, cc_visit
    f_source_code = "".join(inspect.getsourcelines(other_function)[0])
    results = radon.complexity.cc_visit(f_source_code)
    ranking = radon.complexity.sorted_results(results)
    pp = pprint.PrettyPrinter(indent=4)
    ranking_guide = '''
    1 - 5 A (low risk - simple block)
    6 - 10 B (low risk - well structured and stable block)
    11 - 20 C (moderate risk - slightly complex block)
    21 - 30 D (more than moderate risk - more complex block)
    31 - 40 E (high risk - complex block, alarming)
    41+ F (very high risk - error-prone, unstable block)
    '''
    pp.pprint(ranking_guide)
    actual_value = ranking[0][-1]
    pp.pprint('cognitive complexity of function {0} is: {1}'.format(other_function,actual_value))
    #df = pd.DataFrame(['cognitive complexity of function: '+str(other_function),actual_value])

    if actual_value > 10:
        pp.pprint('Consider rewriting your code it might be hard for you and others to understand, and therefore maintain')
    else:
        pp.pprint('Good work keep writing modular, readable, and simple code.')

    return actual_value
from SComplexity import analysis, t_analysis, scrape
import utils
actual_values = list(map(ccomplexity_rater,[t_analysis.text_proc, utils.scrapelandtext, analysis.text_proc]))
